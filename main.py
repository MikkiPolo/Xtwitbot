import logging
import tweepy
import json
import asyncio
import os
from datetime import datetime, timedelta
import pytz
import subprocess
from openai import OpenAI
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto, InputMediaVideo
from telegram.ext import (
    ApplicationBuilder,
    MessageHandler,
    filters,
    CallbackQueryHandler,
    ContextTypes,
    CommandHandler
)
from tweepy import OAuth1UserHandler, API

# ==== –ó–ê–ì–†–£–ó–ö–ê –ö–û–ù–§–ò–ì–ê ====
with open('config.json', 'r') as f:
    config = json.load(f)

TELEGRAM_BOT_TOKEN = config['TELEGRAM_BOT_TOKEN']
OPENAI_API_KEY = config['OPENAI_API_KEY']
TWITTER_API_KEY = config['TWITTER_API_KEY']
TWITTER_API_SECRET = config['TWITTER_API_SECRET']
ACCESS_TOKEN = config['ACCESS_TOKEN']
ACCESS_TOKEN_SECRET = config['ACCESS_TOKEN_SECRET']
BEARER_TOKEN = config['BEARER_TOKEN']
ALLOWED_USER_ID = int(config['ALLOWED_USER_ID'])

# ==== –ù–ê–°–¢–†–û–ô–ö–ê ====
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

client = OpenAI(api_key=OPENAI_API_KEY)
twitter_client = tweepy.Client(
    consumer_key=TWITTER_API_KEY,
    consumer_secret=TWITTER_API_SECRET,
    access_token=ACCESS_TOKEN,
    access_token_secret=ACCESS_TOKEN_SECRET,
    bearer_token=BEARER_TOKEN
)
# Tweepy v1.1 API for media upload
auth_v1 = OAuth1UserHandler(
    TWITTER_API_KEY,
    TWITTER_API_SECRET,
    ACCESS_TOKEN,
    ACCESS_TOKEN_SECRET
)
twitter_api = API(auth_v1)

MSK = pytz.timezone('Europe/Moscow')
PROMPT = (
    "–¢—ã ‚Äî –º–æ–π –ª–∏—á–Ω—ã–π –Ω–æ–≤–æ—Å—Ç–Ω–æ–π –∫–æ–º–º–µ–Ω—Ç–∞—Ç–æ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ –∫–æ—Ä–æ—Ç–∫–∏—Ö —Ç–≤–∏—Ç–æ–≤.\n"
    "–ü–∏—à–∏ —ë–º–∫–∏–µ, –∂–∏–≤—ã–µ –∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –Ω–∞ –Ω–æ–≤–æ—Å—Ç–∏ —Ç–∞–∫, –∫–∞–∫ –±—É–¥—Ç–æ —ç—Ç–æ —è ‚Äî –ø—Ä–æ—Å—Ç–æ–π, —É–º–Ω—ã–π –∏ –Ω–µ—Ä–∞–≤–Ω–æ–¥—É—à–Ω—ã–π –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω –†–æ—Å—Å–∏–∏.\n\n"
    "–ö–∞–∂–¥—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å:\n"
    "- 1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –±–µ–∑ –≤–æ–¥—ã –∏ —Ñ–æ—Ä–º–∞–ª–∏–∑–º–∞\n"
    "- —Å –∏—Ä–æ–Ω–∏–µ–π, —Å–∞—Ä–∫–∞–∑–º–æ–º –∏–ª–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ, –∂—ë—Å—Ç–∫–æ–π –ø—Ä—è–º–æ—Ç–æ–π\n"
    "- –∏—Å–∫—Ä–µ–Ω–Ω–∏–º, –≤—ã–∑—ã–≤–∞—é—â–∏–º —Ä–µ–∞–∫—Ü–∏—é ‚Äî —É–ª—ã–±–∫—É, —Å–æ–≥–ª–∞—Å–∏–µ –∏–ª–∏ —É–¥–∏–≤–ª–µ–Ω–∏–µ\n"
    "- –¥–ª–∏–Ω–æ–π –Ω–µ –±–æ–ª–µ–µ 280 —Å–∏–º–≤–æ–ª–æ–≤ (–ª–∏–º–∏—Ç —Ç–≤–∏—Ç–∞)\n"
    "- —Å —É–º–µ—Å—Ç–Ω—ã–º–∏ —Ö–µ—à—Ç–µ–≥–∞–º–∏ –ø–æ —Ç–µ–º–µ\n\n"
    "–¢—ã —Å–º–æ—Ç—Ä–∏—à—å –Ω–∞ –Ω–æ–≤–æ—Å—Ç–∏ –≥–ª–∞–∑–∞–º–∏ —á–µ–ª–æ–≤–µ–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –∂–∏–≤—ë—Ç –≤ –†–æ—Å—Å–∏–∏, —Å –µ–≥–æ —Å—Ç—Ä–∞—Ö–∞–º–∏, –Ω–∞–¥–µ–∂–¥–∞–º–∏ –∏ —ç–º–æ—Ü–∏—è–º–∏.\n"
    "–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π —à—Ç–∞–º–ø—ã –∏ –∫–ª–∏—à–µ –≤—Ä–æ–¥–µ ‚Äú–º—ã –≤—Å–µ –¥–æ–ª–∂–Ω—ã‚Äù –∏–ª–∏ ‚Äú–æ–±—â–µ—Å—Ç–≤–æ –æ–±—è–∑–∞–Ω–æ‚Äù.\n"
    "–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –Ω–∞—Å—Ç–æ—è—â–∞—è —Ä–µ–∞–∫—Ü–∏—è, –∂–∏–≤–æ–π –∏ —á–µ—Å—Ç–Ω—ã–π –≥–æ–ª–æ—Å."
)

# ==== –•–†–ê–ù–ï–ù–ò–ï –°–û–°–¢–û–Ø–ù–ò–ô ====
pending_tweets = {}
original_messages = {}
user_states = {}
scheduled_queue = {}
pending_media = {}


# ==== –ó–ê–ì–†–£–ó–ö–ê –ú–ï–î–ò–ê –ò–ó TELEGRAM ====
async def download_telegram_file(file_obj, context, user_id):
    # –ü–æ–ª—É—á–∏–º MIME –∏–∑ —Å–∞–º–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞, –∞ –Ω–µ –∏–∑ telegram.File
    mime = ""
    if hasattr(file_obj, 'mime_type'):
        mime = file_obj.mime_type or ""

    if mime.startswith("video"):
        file_path = f"media_{user_id}_{file_obj.file_unique_id}.mp4"
    elif mime.startswith("image"):
        file_path = f"media_{user_id}_{file_obj.file_unique_id}.jpg"
    else:
        file_path = f"media_{user_id}_{file_obj.file_unique_id}"

    full_path = f"/tmp/{file_path}"
    await file_obj.download_to_drive(full_path)
    pending_media[user_id] = full_path
    return full_path

def convert_to_mp4(input_path):
    output_path = input_path.rsplit('.', 1)[0] + "_converted.mp4"
    try:
        subprocess.run([
            "ffmpeg", "-y", "-i", input_path,
            "-c:v", "libx264", "-preset", "fast",
            "-c:a", "aac", output_path
        ], check=True)
        return output_path
    except subprocess.CalledProcessError:
        return None

# ==== –û–ë–†–ê–ë–û–¢–ß–ò–ö –°–û–û–ë–©–ï–ù–ò–ô (–æ–±–Ω–æ–≤–ª—ë–Ω —Å –ª–æ–≥–∞–º–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–≥–æ) ====
async def text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    message = update.message
    if user_id != ALLOWED_USER_ID or not message:
        return

    logger.info(f"üì© –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id}: forwarded={message.forward_origin is not None}, caption={message.caption}, text={message.text}")

    text = message.caption if message.caption else message.text
    media_saved = False
    state = user_states.get(user_id)

    # === –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ GPT ===
    if isinstance(state, dict) and state.get('mode') == 'editing':
        comment = text
        draft = state.get('draft')
        try:
            response = client.chat.completions.create(
                model="gpt-4",
                messages=[
                    {"role": "system", "content": PROMPT},
                    {"role": "user", "content": f"–í–æ—Ç —Ç–≤–∏—Ç: {draft}\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ—Ä–∞–±–æ—Ç–∞–π –µ–≥–æ –ø–æ –∑–∞–º–µ—á–∞–Ω–∏—é: {comment}"}
                ]
            )
            updated = response.choices[0].message.content.strip()
            pending_tweets[user_id] = updated
            user_states[user_id] = None
            keyboard = [[
                InlineKeyboardButton("‚úÖ –ü—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data="publish"),
                InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel")
            ]]
            await message.reply_text(f"–û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Ç–≤–∏—Ç:\n\n{updated}", reply_markup=InlineKeyboardMarkup(keyboard))
        except Exception as e:
            logger.error(f"GPT –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
            await message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ—Ä–∞–±–æ—Ç–∫–µ —Ç–≤–∏—Ç–∞.")
        return

    # === –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞: —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, –¥–æ–∫—É–º–µ–Ω—Ç ===
    if message.photo:
        await download_telegram_file(await message.photo[-1].get_file(), context, user_id)
        media_saved = True
    elif message.video:
        await download_telegram_file(await message.video.get_file(), context, user_id)
        media_saved = True
    elif message.document and message.document.mime_type.startswith("video"):
        await download_telegram_file(await message.document.get_file(), context, user_id)
        media_saved = True

    # === –ï—Å–ª–∏ –ø—Ä–∏—à–ª–∞ –º–µ–¥–∏–∞ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞ ===
    if media_saved and not text:
        user_states[user_id] = "awaiting_caption"
        await message.reply_text("üìé –ü–æ–ª—É—á–∏–ª –º–µ–¥–∏–∞. –ü—Ä–∏—à–ª–∏ –ø–æ–¥–ø–∏—Å—å (—Ç–µ–∫—Å—Ç), —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å —Ç–≤–∏—Ç.")
        return

    # === –ü–æ–ª—É—á–∏–ª–∏ –ø–æ–¥–ø–∏—Å—å –ø–æ—Å–ª–µ –º–µ–¥–∏–∞ ===
    if state == "awaiting_caption":
        user_states[user_id] = None

    # === –ï—Å–ª–∏ –Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞ ‚Äî –∏–≥–Ω–æ—Ä ===
    if not text:
        await message.reply_text("‚ùóÔ∏è –ù–µ –≤–∏–∂—É —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Ç–≤–∏—Ç–∞. –û—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç.")
        return

    # === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–≤–∏—Ç–∞ ===
    try:
        response = client.chat.completions.create(
            model="gpt-4",
            messages=[
                {"role": "system", "content": PROMPT},
                {"role": "user", "content": text}
            ]
        )
        tweet_text = response.choices[0].message.content.strip()
    except Exception as e:
        logger.error(f"GPT –æ—à–∏–±–∫–∞: {e}")
        await message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–≤–∏—Ç–∞.")
        return

    pending_tweets[user_id] = tweet_text
    original_messages[user_id] = text
    keyboard = [[
        InlineKeyboardButton("‚úÖ –ü—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data="publish"),
        InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="edit"),
        InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel")
    ]]
    await message.reply_text(f"–í–æ—Ç –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–≤–∏—Ç:\n\n{tweet_text}", reply_markup=InlineKeyboardMarkup(keyboard))

# ==== –ö–ù–û–ü–ö–ò ====
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    await query.answer()

    if user_id != ALLOWED_USER_ID:
        return

    if query.data == "publish":
        keyboard = [[
            InlineKeyboardButton("–°–µ–π—á–∞—Å", callback_data="post_now"),
            InlineKeyboardButton("15 –º–∏–Ω—É—Ç", callback_data="delay_15")
        ], [
            InlineKeyboardButton("30 –º–∏–Ω—É—Ç", callback_data="delay_30"),
            InlineKeyboardButton("1 —á–∞—Å", callback_data="delay_60")
        ]]
        await query.edit_message_text("‚è± –ö–æ–≥–¥–∞ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Ç–≤–∏—Ç?", reply_markup=InlineKeyboardMarkup(keyboard))

    elif query.data == "post_now":
        await post_now(user_id, context)
        await query.edit_message_text("‚úÖ –¢–≤–∏—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ!")

    elif query.data.startswith("delay_"):
        minutes = int(query.data.split("_")[1])
        post_time_utc = datetime.utcnow().replace(tzinfo=pytz.utc) + timedelta(minutes=minutes)
        await schedule_tweet(user_id, post_time_utc, context)
        msk_time = post_time_utc.astimezone(MSK).strftime('%H:%M:%S')
        await query.edit_message_text(f"‚úÖ –¢–≤–∏—Ç –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ {msk_time} –ú–°–ö")

    elif query.data == "custom_time":
        user_states[user_id] = 'awaiting_time'
        await query.edit_message_text("üïí –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM (–ú–°–ö)")

    elif query.data == "edit":
        tweet = pending_tweets.get(user_id, '')
        user_states[user_id] = {"mode": "editing", "draft": tweet}
        await query.edit_message_text(f"‚úèÔ∏è –ù–∞–ø–∏—à–∏, —á—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å. –¢–µ–∫—É—â–∏–π —Ç–≤–∏—Ç:\n\n{tweet}")

    elif query.data == "cancel":
        pending_tweets.pop(user_id, None)
        original_messages.pop(user_id, None)
        user_states.pop(user_id, None)
        await query.edit_message_text("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ.")

    elif query.data.startswith("cancel_post_"):
        idx = int(query.data.split("_")[-1])
        if user_id in scheduled_queue and idx < len(scheduled_queue[user_id]):
            scheduled_queue[user_id].pop(idx)
            await query.edit_message_text("‚ùå –¢–≤–∏—Ç —É–¥–∞–ª—ë–Ω –∏–∑ –æ—á–µ—Ä–µ–¥–∏.")
        else:
            await query.edit_message_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–≤–∏—Ç.")

# ==== –ü–£–ë–õ–ò–ö–ê–¶–ò–Ø –°–†–ê–ó–£ ====
async def post_now(user_id, context):
    tweet = pending_tweets.get(user_id)
    media_ids = []
    media_path = pending_media.get(user_id)

    # –ó–∞–≥—Ä—É–∑–∫–∞ –º–µ–¥–∏–∞ —á–µ—Ä–µ–∑ tweepy.API
    if media_path and os.path.exists(media_path):
        try:
            if not media_path.endswith(".mp4"):
                converted = convert_to_mp4(media_path)
                if not converted or not os.path.exists(converted):
                    await context.bot.send_message(chat_id=user_id, text="‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤–∏–¥–µ–æ –≤ .mp4")
                    return
                media_path = converted  # –∑–∞–º–µ–Ω—è–µ–º –ø—É—Ç—å –Ω–∞ —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π

            media = twitter_api.media_upload(filename=media_path, media_category='tweet_video')
            media_ids = [media.media_id]
        except Exception as e:
            await context.bot.send_message(chat_id=user_id, text=f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –º–µ–¥–∏–∞: {e}")

    try:
        twitter_client.create_tweet(text=tweet, media_ids=media_ids if media_ids else None)
        await context.bot.send_message(chat_id=user_id, text="‚úÖ –¢–≤–∏—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!")
    except Exception as e:
        await context.bot.send_message(chat_id=user_id, text=f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")

    # –û—á–∏—Å—Ç–∫–∞
    pending_tweets.pop(user_id, None)
    original_messages.pop(user_id, None)
    user_states.pop(user_id, None)
    if media_path and os.path.exists(media_path):
        os.remove(media_path)
    pending_media.pop(user_id, None)

# ==== –û–¢–õ–û–ñ–ï–ù–ù–ê–Ø –ü–£–ë–õ–ò–ö–ê–¶–ò–Ø ====
async def schedule_tweet(user_id, time_dt, context):
    tweet = pending_tweets.get(user_id)
    if not tweet:
        return

    scheduled_queue.setdefault(user_id, []).append((tweet, time_dt))
    pending_tweets.pop(user_id, None)
    original_messages.pop(user_id, None)
    user_states.pop(user_id, None)

    async def delayed_post():
        now = datetime.utcnow().replace(tzinfo=pytz.utc)
        media_path = pending_media.get(user_id)
        delay = (time_dt - now).total_seconds()
        await asyncio.sleep(max(0, delay))

        media_ids = []
        if media_path and os.path.exists(media_path):
            try:
                if not media_path.endswith(".mp4"):
                    converted = convert_to_mp4(media_path)
                    if not converted or not os.path.exists(converted):
                        await context.bot.send_message(chat_id=user_id, text="‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤–∏–¥–µ–æ –≤ .mp4")
                        return
                    media_path = converted  # –∑–∞–º–µ–Ω—è–µ–º –ø—É—Ç—å –Ω–∞ —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π

                media = twitter_api.media_upload(filename=media_path, media_category='tweet_video')
                media_ids = [media.media_id]
            except Exception as e:
                await context.bot.send_message(chat_id=user_id, text=f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –º–µ–¥–∏–∞: {e}")
        try:
            twitter_client.create_tweet(text=tweet, media_ids=media_ids if media_ids else None)
            await context.bot.send_message(chat_id=user_id, text="‚úÖ –û—Ç–ª–æ–∂–µ–Ω–Ω—ã–π —Ç–≤–∏—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!")
        except Exception as e:
            await context.bot.send_message(chat_id=user_id, text=f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")
        if user_id in scheduled_queue:
            scheduled_queue[user_id] = [x for x in scheduled_queue[user_id] if x[0] != tweet or x[1] != time_dt]

    asyncio.create_task(delayed_post())

# ==== –ö–û–ú–ê–ù–î–ê /see ====
async def see_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id != ALLOWED_USER_ID:
        return

    posts = scheduled_queue.get(user_id, [])
    if not posts:
        await update.message.reply_text("üì≠ –£ —Ç–µ–±—è –Ω–µ—Ç –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö —Ç–≤–∏—Ç–æ–≤.")
        return

    for idx, (text, dt) in enumerate(posts):
        msk_time = dt.astimezone(MSK).strftime('%Y-%m-%d %H:%M:%S')
        preview = text[:100].strip() + ('...' if len(text) > 100 else '')
        keyboard = [[InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"cancel_post_{idx}")]]
        await update.message.reply_text(f"üïí {msk_time} –ú–°–ö\n{preview}", reply_markup=InlineKeyboardMarkup(keyboard))

# ==== –ó–ê–ü–£–°–ö ====
if __name__ == '__main__':
    app = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()
    app.add_handler(MessageHandler(filters.FORWARDED, text_handler))
    app.add_handler(CommandHandler("see", see_handler))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, text_handler))
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()